boot.ci(b)
b=boot(pp.explicit$crit_noinput_T3, samplemean, R=10000)
plot(b)
boot.ci(b)
b=boot(pp.incidental$crit_input_T1, samplemean, R=10000)
plot(b) # check if the bootstrap looks like a normal distribution
boot.ci(b) # Output: use BCA!
b=boot(pp.incidental$crit_input_T2, samplemean, R=10000)
plot(b)
boot.ci(b)
b=boot(pp.incidental$crit_input_T3, samplemean, R=10000)
plot(b)
boot.ci(b)
b=boot(pp.incidental$crit_noinput_T1, samplemean, R=10000)
plot(b) # check if the bootstrap looks like a normal distribution
boot.ci(b) # Output: use BCA!
b=boot(pp.incidental$crit_noinput_T2, samplemean, R=10000)
plot(b)
boot.ci(b)
b=boot(pp.incidental$crit_noinput_T3, samplemean, R=10000)
plot(b)
boot.ci(b)
b=boot(pp.unaware$crit_input_T1, samplemean, R=10000)
plot(b) # check if the bootstrap looks like a normal distribution
boot.ci(b) # Output: use BCA!
b=boot(pp.unaware$crit_input_T2, samplemean, R=10000)
plot(b)
boot.ci(b)
b=boot(pp.unaware$crit_input_T3, samplemean, R=10000)
plot(b)
boot.ci(b)
b=boot(pp.unaware$crit_noinput_T1, samplemean, R=10000)
plot(b) # check if the bootstrap looks like a normal distribution
boot.ci(b) # Output: use BCA!
b=boot(pp.unaware$crit_noinput_T2, samplemean, R=10000)
plot(b)
boot.ci(b)
b=boot(pp.unaware$crit_noinput_T3, samplemean, R=10000)
plot(b)
boot.ci(b)
b=boot(participantsdata$crit_input_T1, samplemean, R=10000)
plot(b)
boot.ci(b)
b=boot(participantsdata$crit_input_T2, samplemean, R=10000)
plot(b)
boot.ci(b)
b=boot(participantsdata$crit_input_T3, samplemean, R=10000)
plot(b)
boot.ci(b)
b=boot(participantsdata$crit_noinput_T1, samplemean, R=10000)
plot(b)
boot.ci(b)
b=boot(participantsdata$crit_noinput_T2, samplemean, R=10000)
plot(b)
boot.ci(b)
b=boot(participantsdata$crit_noinput_T3, samplemean, R=10000)
plot(b)
boot.ci(b)
b=boot(pp.explicit.incidental$crit_input_T1, samplemean, R=10000)
plot(b)
boot.ci(b)
b=boot(pp.explicit.incidental$crit_input_T2, samplemean, R=10000)
plot(b)
boot.ci(b)
b=boot(pp.explicit.incidental$crit_input_T3, samplemean, R=10000)
plot(b)
boot.ci(b)
b=boot(pp.explicit.incidental$crit_noinput_T1, samplemean, R=10000)
plot(b)
boot.ci(b)
b=boot(pp.explicit.incidental$crit_noinput_T2, samplemean, R=10000)
plot(b)
boot.ci(b)
b=boot(pp.explicit.incidental$crit_noinput_T3, samplemean, R=10000)
plot(b)
boot.ci(b)
b=boot(pp.explicit$contr_input_T1, samplemean, R=10000)
plot(b) # check if the bootstrap looks like a normal distribution
boot.ci(b) # Output: use BCA!
b=boot(pp.explicit$contr_input_T2, samplemean, R=10000)
plot(b)
boot.ci(b)
b=boot(pp.explicit$contr_input_T3, samplemean, R=10000)
plot(b)
boot.ci(b)
b=boot(pp.explicit$contr_noinput_T1, samplemean, R=10000)
plot(b) # check if the bootstrap looks like a normal distribution
boot.ci(b) # Output: use BCA!
b=boot(pp.explicit$contr_noinput_T2, samplemean, R=10000)
plot(b)
boot.ci(b)
b=boot(pp.explicit$contr_noinput_T3, samplemean, R=10000)
plot(b)
boot.ci(b)
b=boot(pp.incidental$contr_input_T1, samplemean, R=10000)
plot(b) # check if the bootstrap looks like a normal distribution
boot.ci(b) # Output: use BCA!
b=boot(pp.incidental$contr_input_T2, samplemean, R=10000)
plot(b)
boot.ci(b)
b=boot(pp.incidental$contr_input_T3, samplemean, R=10000)
plot(b)
boot.ci(b)
b=boot(pp.incidental$contr_noinput_T1, samplemean, R=10000)
plot(b) # check if the bootstrap looks like a normal distribution
boot.ci(b) # Output: use BCA!
b=boot(pp.incidental$contr_noinput_T2, samplemean, R=10000)
plot(b)
boot.ci(b)
b=boot(pp.incidental$contr_noinput_T3, samplemean, R=10000)
plot(b)
boot.ci(b)
b=boot(pp.unaware$contr_input_T1, samplemean, R=10000)
plot(b) # check if the bootstrap looks like a normal distribution
boot.ci(b) # Output: use BCA!
b=boot(pp.unaware$contr_input_T2, samplemean, R=10000)
plot(b)
boot.ci(b)
b=boot(pp.unaware$contr_input_T3, samplemean, R=10000)
plot(b)
boot.ci(b)
b=boot(pp.unaware$contr_noinput_T1, samplemean, R=10000)
plot(b) # check if the bootstrap looks like a normal distribution
boot.ci(b) # Output: use BCA!
b=boot(pp.unaware$contr_noinput_T2, samplemean, R=10000)
plot(b)
boot.ci(b)
b=boot(pp.unaware$contr_noinput_T3, samplemean, R=10000)
plot(b)
boot.ci(b)
participantsdata.wide <- read.csv("../data/180529_Data_participants_IV.csv", header = TRUE) # load data
colnames(participantsdata.wide)[1] <- "participant" #rename participant variable
library(reshape2) # load the necessary package
attach(participantsdata.wide) # attach dataframe
is.factor(participant) # check whether Participant is factor (it should be a factor)
View(participantsdata.wide)
View(participantsdata)
colnames(participantsdata.wide) #check column numbers
participantsdata.wide <- participantsdata.wide[, -c(2, 4:36, 49:77)] #exclude columns I don't need
colnames(participantsdata.wide) #check
participantsdata.long <- melt(participantsdata.wide, id.vars = c("participant", "learningtype"), variable.name = "variable", value.name = "score") # use melt function to put data into long format
View(participantsdata.long)
str(participantsdata.long) # tells about structure of the dataframe; check if there are number of pp x 12 observations
participantsdata.long <-cbind(participantsdata.long, colsplit(participantsdata.long$variable, "_", names = c("verbtype", "input", "moment")))
View(participantsdata.long)
participantsdata.long$verbtype <- factor(participantsdata.long$verbtype); is.factor(participantsdata.long$verbtype)
participantsdata.long$input <- factor(participantsdata.long$input); is.factor(participantsdata.long$input)
participantsdata.long$moment <- factor(participantsdata.long$moment); is.factor(participantsdata.long$moment)
criticals <- participantsdata.long [which(participantsdata.long$verbtype == 'crit'), ]
controls <- participantsdata.long [which(participantsdata.long$verbtype == 'contr'), ]
interaction.plot(criticals$moment, criticals$input, criticals$score,
type = c("b"), xlab = "Time", ylab = "Mean score", trace.label="Input")
interaction.plot(controls$moment, controls$input, controls$score,
type = c("b"), xlab = "Time", ylab = "Mean score", trace.label="Input")
pp.explicit.long <- subset(participantsdata.long, subset=learningtype=="explicit") # create subset with explicit learners
pp.incidental.long <- subset(participantsdata.long, subset=learningtype=="incidental") # create subset with incidental learners
pp.unaware.long <- subset(participantsdata.long, subset=learningtype=="unaware") # create subset with unaware participants
criticals <- pp.explicit.long [which(pp.explicit.long$verbtype == 'crit'), ]
controls <- pp.explicit.long [which(pp.explicit.long$verbtype == 'contr'), ]
interaction.plot(criticals$moment, criticals$input, criticals$score, type = c("b"), xlab = "Time", ylab = "Mean score", trace.label="Input")
interaction.plot(controls$moment, controls$input, controls$score, type = c("b"), xlab = "Time", ylab = "Mean score", trace.label="Input")
interaction.plot(criticals$moment, criticals$input, criticals$score, type = c("b"), xlab = "Time", ylab = "Mean score", trace.label="Input")
interaction.plot(controls$moment, controls$input, controls$score, type = c("b"), xlab = "Time", ylab = "Mean score", trace.label="Input")
criticals <- pp.incidental.long [which(pp.incidental.long$verbtype == 'crit'), ]
controls <- pp.incidental.long [which(pp.incidental.long$verbtype == 'contr'), ]
interaction.plot(criticals$moment, criticals$input, criticals$score, type = c("b"), xlab = "Time", ylab = "Mean score", trace.label="Input")
interaction.plot(controls$moment, controls$input, controls$score, type = c("b"), xlab = "Time", ylab = "Mean score", trace.label="Input")
criticals <- pp.unaware.long [which(pp.unaware.long$verbtype == 'crit'), ]
controls <- pp.unaware.long [which(pp.unaware.long$verbtype == 'contr'), ]
interaction.plot(criticals$moment, criticals$input, criticals$score, type = c("b"), xlab = "Time", ylab = "Mean score", trace.label="Input")
interaction.plot(controls$moment, controls$input, controls$score, type = c("b"), xlab = "Time", ylab = "Mean score", trace.label="Input")
attach(participantsdata.long)
install.packages("HH")
library(lattice)
library(HH)
interaction2wt(score~learningtype*verbtype*input*moment, par.strip.text=list(cex=.6),
main.in="Effects of Learning Type, Verb Type, Input and Test Moment on Accuracy",
box.ratio = .3, rot = c(90, 90), factor.expressions =
c(Condition=expression("Group"),
Type=expression("Verb Type"),
Input= expression ("Input"),
Moment= expression ("Test Moment")), responselab.expression = "bla")
parallelplot(~participantsdata.wide[c(3, 7)] | participantsdata.wide$learningtype, data = participantsdata.wide)
rm(list=ls()) # clear workspace
options(contrasts=c("contr.sum","contr.poly")) # Set contrasts to sum-to-zero
participantsdata <- read.csv("../data/180529_Data_participants_IV.csv", header = TRUE) # load data
colnames(participantsdata)[1] <- "participant" #rename participant variable
str(participantsdata)
proficiency_overall <- factor(participantsdata$proficiency_overall, ordered=TRUE)
str(participantsdata)
participantsdata$proficiency_overall <- as.factor(participantsdata$proficiency_overall)
str(participantsdata)
participantsdata$proficiency_overall <- as.factor(participantsdata$proficiency_overall, ordered=TRUE)
participantsdata <- read.csv("../data/180529_Data_participants_IV.csv", header = TRUE) # load data
colnames(participantsdata)[1] <- "participant" #rename participant variable
str(participantsdata)
proficiency_overall <- factor(participantsdata$proficiency_overall, ordered=TRUE)
proficiency_written <- factor(participantsdata$proficiency_written, ordered=TRUE)
proficiency_average <- factor(participantsdata$proficiency_average, ordered=TRUE)
proficiency_oral <- factor(participantsdata$proficiency_oral, ordered=TRUE)
comprehension_oral <- factor(participantsdata$comprehension_oral, ordered=TRUE)
comprehension_written <- factor(participantsdata$comprehension_written, ordered=TRUE)
usage <- factor(participantsdata$usage, ordered=TRUE)
pp.explicit <- subset(participantsdata, subset=learningtype=="explicit")
pp.incidental <- subset(participantsdata, subset=learningtype=="incidental")
pp.unaware <- subset(participantsdata, subset=learningtype=="unaware")
instructiontime <- read.csv("../data/180522_German_instruction.csv", header = TRUE)
colnames(instructiontime)[1] <- "participant" #rename participant variable
instruction.explicit <- subset(instructiontime, subset=Learningtype=="explicit")
instruction.incidental <- subset(instructiontime, subset=Learningtype=="incidental")
instruction.unaware <- subset(instructiontime, subset=Learningtype=="unaware")
instruction.exp.inc <- subset(instructiontime, Learningtype !="unaware")
instruction.exp.inc <- droplevels(instruction.exp.inc, instruction.exp.inc$Learningtype=="unaware")
colnames(participantsdata)
shapiro.lextale.exp <- shapiro.test(pp.explicit$lextale)
# SHAPIRO-WILK (should not be significant)
# lextale
shapiro.lextale.exp <- shapiro.test(pp.explicit$lextale)
shapiro.lextale.inc <- shapiro.test(pp.incidental$lextale)
shapiro.lextale.una <- shapiro.test(pp.unaware$lextale)
# proficiency_overall
shapiro.proficiency_overall.exp <- shapiro.test(pp.explicit$proficiency_overall)
shapiro.proficiency_overall.inc <- shapiro.test(pp.incidental$proficiency_overall)
shapiro.proficiency_overall.una <- shapiro.test(pp.unaware$proficiency_overall)
# proficiency_oral
shapiro.proficiency_oral.exp <- shapiro.test(pp.explicit$proficiency_oral)
shapiro.proficiency_oral.inc <- shapiro.test(pp.incidental$proficiency_oral)
shapiro.proficiency_oral.una <- shapiro.test(pp.unaware$proficiency_oral)
# proficiency_written
shapiro.proficiency_written.exp <- shapiro.test(pp.explicit$proficiency_written)
shapiro.proficiency_written.inc <- shapiro.test(pp.incidental$proficiency_written)
shapiro.proficiency_written.una <- shapiro.test(pp.unaware$proficiency_written)
# proficiency_average
shapiro.proficiency_average.exp <- shapiro.test(pp.explicit$proficiency_average)
shapiro.proficiency_average.inc <- shapiro.test(pp.incidental$proficiency_average)
shapiro.proficiency_average.una <- shapiro.test(pp.unaware$proficiency_average)
# comprehension_oral
shapiro.comprehension_oral.exp <- shapiro.test(pp.explicit$comprehension_oral)
shapiro.comprehension_oral.inc <- shapiro.test(pp.incidental$comprehension_oral)
shapiro.comprehension_oral.una <- shapiro.test(pp.unaware$comprehension_oral)
# comprehension_written
shapiro.comprehension_written.exp <- shapiro.test(pp.explicit$comprehension_written)
shapiro.comprehension_written.inc <- shapiro.test(pp.incidental$comprehension_written)
shapiro.comprehension_written.una <- shapiro.test(pp.unaware$comprehension_written)
# PRE_CRIT
shapiro.PRE_CRIT.exp <- shapiro.test(pp.explicit$PRE_CRIT)
shapiro.PRE_CRIT.inc <- shapiro.test(pp.incidental$PRE_CRIT)
shapiro.PRE_CRIT.una <- shapiro.test(pp.unaware$PRE_CRIT) # error (I'll exclude it from the list)
# PRE_CONTR
shapiro.PRE_CONTR.exp <- shapiro.test(pp.explicit$PRE_CONTR)
shapiro.PRE_CONTR.inc <- shapiro.test(pp.incidental$PRE_CONTR)
shapiro.PRE_CONTR.una <- shapiro.test(pp.unaware$PRE_CONTR)
# usage
shapiro.usage.exp <- shapiro.test(pp.explicit$usage)
shapiro.usage.inc <- shapiro.test(pp.incidental$usage)
shapiro.usage.una <- shapiro.test(pp.unaware$usage)
shapiro.results <- cbind(shapiro.lextale.exp, shapiro.lextale.inc, shapiro.lextale.una, shapiro.proficiency_overall.exp,
shapiro.proficiency_overall.inc, shapiro.proficiency_overall.una, shapiro.proficiency_oral.exp,
shapiro.proficiency_oral.inc, shapiro.proficiency_oral.una, shapiro.proficiency_written.exp,
shapiro.proficiency_written.inc, shapiro.proficiency_written.una, shapiro.proficiency_average.exp,
shapiro.proficiency_average.inc, shapiro.proficiency_average.una, shapiro.comprehension_oral.exp,
shapiro.comprehension_oral.inc, shapiro.comprehension_oral.una, shapiro.comprehension_written.exp,
shapiro.comprehension_written.inc, shapiro.comprehension_written.una, shapiro.PRE_CRIT.exp, shapiro.PRE_CRIT.inc,
shapiro.PRE_CONTR.exp, shapiro.PRE_CONTR.inc, shapiro.PRE_CONTR.una,
shapiro.usage.exp, shapiro.usage.inc, shapiro.usage.una)
write.csv(shapiro.results, file="../results/Shapiro.csv") # write csv output
# CHECK SKEW AND KURTOSIS (skew.2SE should be smaller than 1)
library(pastecs)
# lextale
desc.lextale.exp <- stat.desc(pp.explicit$lextale, basic=TRUE, norm=TRUE)
desc.lextale.inc <- stat.desc(pp.incidental$lextale, basic=TRUE, norm=TRUE)
desc.lextale.una <- stat.desc(pp.unaware$lextale, basic=TRUE, norm=TRUE)
# proficiency_overall
desc.proficiency_overall.exp <- stat.desc(pp.explicit$proficiency_overall, basic=TRUE, norm=TRUE)
desc.proficiency_overall.inc <- stat.desc(pp.incidental$proficiency_overall, basic=TRUE, norm=TRUE)
desc.proficiency_overall.una <- stat.desc(pp.unaware$proficiency_overall, basic=TRUE, norm=TRUE)
# proficiency_oral
desc.proficiency_oral.exp <- stat.desc(pp.explicit$proficiency_oral, basic=TRUE, norm=TRUE)
desc.proficiency_oral.inc <- stat.desc(pp.incidental$proficiency_oral, basic=TRUE, norm=TRUE)
desc.proficiency_oral.una <- stat.desc(pp.unaware$proficiency_oral, basic=TRUE, norm=TRUE)
# proficiency_written
desc.proficiency_written.exp <- stat.desc(pp.explicit$proficiency_written, basic=TRUE, norm=TRUE)
desc.proficiency_written.inc <- stat.desc(pp.incidental$proficiency_written, basic=TRUE, norm=TRUE)
desc.proficiency_written.una <- stat.desc(pp.unaware$proficiency_written, basic=TRUE, norm=TRUE)
# proficiency_average
desc.proficiency_average.exp <- stat.desc(pp.explicit$proficiency_average, basic=TRUE, norm=TRUE)
desc.proficiency_average.inc <- stat.desc(pp.incidental$proficiency_average, basic=TRUE, norm=TRUE)
desc.proficiency_average.una <- stat.desc(pp.unaware$proficiency_average, basic=TRUE, norm=TRUE)
# comprehension_oral
desc.comprehension_oral.exp <- stat.desc(pp.explicit$comprehension_oral, basic=TRUE, norm=TRUE)
desc.comprehension_oral.inc <- stat.desc(pp.incidental$comprehension_oral, basic=TRUE, norm=TRUE)
desc.comprehension_oral.una <- stat.desc(pp.unaware$comprehension_oral, basic=TRUE, norm=TRUE)
# comprehension_written
desc.comprehension_written.exp <- stat.desc(pp.explicit$comprehension_written, basic=TRUE, norm=TRUE)
desc.comprehension_written.inc <- stat.desc(pp.incidental$comprehension_written, basic=TRUE, norm=TRUE)
desc.comprehension_written.una <- stat.desc(pp.unaware$comprehension_written, basic=TRUE, norm=TRUE)
# PRE_CRIT
desc.PRE_CRIT.exp <- stat.desc(pp.explicit$PRE_CRIT, basic=TRUE, norm=TRUE)
desc.PRE_CRIT.inc <- stat.desc(pp.incidental$PRE_CRIT, basic=TRUE, norm=TRUE)
desc.PRE_CRIT.una <- stat.desc(pp.unaware$PRE_CRIT, basic=TRUE, norm=TRUE) # error (I'll exclude it from the list)
# PRE_CONTR
desc.PRE_CONTR.exp <- stat.desc(pp.explicit$PRE_CONTR, basic=TRUE, norm=TRUE)
desc.PRE_CONTR.inc <- stat.desc(pp.incidental$PRE_CONTR, basic=TRUE, norm=TRUE)
desc.PRE_CONTR.una <- stat.desc(pp.unaware$PRE_CONTR, basic=TRUE, norm=TRUE)
# usage
desc.usage.exp <- stat.desc(pp.explicit$usage, basic=TRUE, norm=TRUE)
desc.usage.inc <- stat.desc(pp.incidental$usage, basic=TRUE, norm=TRUE)
desc.usage.una <- stat.desc(pp.unaware$usage, basic=TRUE, norm=TRUE)
desc.usage.exp
desc.usage.inc
desc.usage.una
# bind results together
desc.results <- cbind(desc.lextale.exp,desc.lextale.inc,desc.lextale.una,
desc.proficiency_overall.exp,desc.proficiency_overall.inc,desc.proficiency_overall.una,
desc.proficiency_oral.exp,desc.proficiency_oral.inc,desc.proficiency_oral.una,
desc.proficiency_written.exp,desc.proficiency_written.inc,desc.proficiency_written.una,
desc.proficiency_average.exp,desc.proficiency_average.inc,desc.proficiency_average.una,
desc.comprehension_oral.exp,desc.comprehension_oral.inc,desc.comprehension_oral.una,
desc.comprehension_written.exp,desc.comprehension_written.inc,desc.comprehension_written.una,
desc.PRE_CRIT.exp,desc.PRE_CRIT.inc, desc.PRE_CONTR.exp,desc.PRE_CONTR.inc,desc.PRE_CONTR.una,
desc.usage.exp, desc.usage.inc, desc.usage.una)
library(pastecs)
install.packages("pastecs")
# lextale
desc.lextale.exp <- stat.desc(pp.explicit$lextale, basic=TRUE, norm=TRUE)
desc.lextale.inc <- stat.desc(pp.incidental$lextale, basic=TRUE, norm=TRUE)
desc.lextale.una <- stat.desc(pp.unaware$lextale, basic=TRUE, norm=TRUE)
# proficiency_overall
desc.proficiency_overall.exp <- stat.desc(pp.explicit$proficiency_overall, basic=TRUE, norm=TRUE)
desc.proficiency_overall.inc <- stat.desc(pp.incidental$proficiency_overall, basic=TRUE, norm=TRUE)
desc.proficiency_overall.una <- stat.desc(pp.unaware$proficiency_overall, basic=TRUE, norm=TRUE)
# proficiency_oral
desc.proficiency_oral.exp <- stat.desc(pp.explicit$proficiency_oral, basic=TRUE, norm=TRUE)
desc.proficiency_oral.inc <- stat.desc(pp.incidental$proficiency_oral, basic=TRUE, norm=TRUE)
desc.proficiency_oral.una <- stat.desc(pp.unaware$proficiency_oral, basic=TRUE, norm=TRUE)
# proficiency_written
desc.proficiency_written.exp <- stat.desc(pp.explicit$proficiency_written, basic=TRUE, norm=TRUE)
desc.proficiency_written.inc <- stat.desc(pp.incidental$proficiency_written, basic=TRUE, norm=TRUE)
desc.proficiency_written.una <- stat.desc(pp.unaware$proficiency_written, basic=TRUE, norm=TRUE)
# proficiency_average
desc.proficiency_average.exp <- stat.desc(pp.explicit$proficiency_average, basic=TRUE, norm=TRUE)
desc.proficiency_average.inc <- stat.desc(pp.incidental$proficiency_average, basic=TRUE, norm=TRUE)
desc.proficiency_average.una <- stat.desc(pp.unaware$proficiency_average, basic=TRUE, norm=TRUE)
# comprehension_oral
desc.comprehension_oral.exp <- stat.desc(pp.explicit$comprehension_oral, basic=TRUE, norm=TRUE)
desc.comprehension_oral.inc <- stat.desc(pp.incidental$comprehension_oral, basic=TRUE, norm=TRUE)
desc.comprehension_oral.una <- stat.desc(pp.unaware$comprehension_oral, basic=TRUE, norm=TRUE)
# comprehension_written
desc.comprehension_written.exp <- stat.desc(pp.explicit$comprehension_written, basic=TRUE, norm=TRUE)
desc.comprehension_written.inc <- stat.desc(pp.incidental$comprehension_written, basic=TRUE, norm=TRUE)
desc.comprehension_written.una <- stat.desc(pp.unaware$comprehension_written, basic=TRUE, norm=TRUE)
# PRE_CRIT
desc.PRE_CRIT.exp <- stat.desc(pp.explicit$PRE_CRIT, basic=TRUE, norm=TRUE)
desc.PRE_CRIT.inc <- stat.desc(pp.incidental$PRE_CRIT, basic=TRUE, norm=TRUE)
desc.PRE_CRIT.una <- stat.desc(pp.unaware$PRE_CRIT, basic=TRUE, norm=TRUE) # error (I'll exclude it from the list)
# PRE_CONTR
desc.PRE_CONTR.exp <- stat.desc(pp.explicit$PRE_CONTR, basic=TRUE, norm=TRUE)
desc.PRE_CONTR.inc <- stat.desc(pp.incidental$PRE_CONTR, basic=TRUE, norm=TRUE)
desc.PRE_CONTR.una <- stat.desc(pp.unaware$PRE_CONTR, basic=TRUE, norm=TRUE)
# usage
desc.usage.exp <- stat.desc(pp.explicit$usage, basic=TRUE, norm=TRUE)
desc.usage.inc <- stat.desc(pp.incidental$usage, basic=TRUE, norm=TRUE)
desc.usage.una <- stat.desc(pp.unaware$usage, basic=TRUE, norm=TRUE)
desc.usage.exp
desc.usage.inc
desc.usage.una
# bind results together
desc.results <- cbind(desc.lextale.exp,desc.lextale.inc,desc.lextale.una,
desc.proficiency_overall.exp,desc.proficiency_overall.inc,desc.proficiency_overall.una,
desc.proficiency_oral.exp,desc.proficiency_oral.inc,desc.proficiency_oral.una,
desc.proficiency_written.exp,desc.proficiency_written.inc,desc.proficiency_written.una,
desc.proficiency_average.exp,desc.proficiency_average.inc,desc.proficiency_average.una,
desc.comprehension_oral.exp,desc.comprehension_oral.inc,desc.comprehension_oral.una,
desc.comprehension_written.exp,desc.comprehension_written.inc,desc.comprehension_written.una,
desc.PRE_CRIT.exp,desc.PRE_CRIT.inc, desc.PRE_CONTR.exp,desc.PRE_CONTR.inc,desc.PRE_CONTR.una,
desc.usage.exp, desc.usage.inc, desc.usage.una)
desc.lextale.exp <- stat.desc(pp.explicit$lextale, basic=TRUE, norm=TRUE)
library(pastecs)
desc.lextale.exp <- stat.desc(pp.explicit$lextale, basic=TRUE, norm=TRUE)
desc.lextale.inc <- stat.desc(pp.incidental$lextale, basic=TRUE, norm=TRUE)
desc.lextale.una <- stat.desc(pp.unaware$lextale, basic=TRUE, norm=TRUE)
# proficiency_overall
desc.proficiency_overall.exp <- stat.desc(pp.explicit$proficiency_overall, basic=TRUE, norm=TRUE)
desc.proficiency_overall.inc <- stat.desc(pp.incidental$proficiency_overall, basic=TRUE, norm=TRUE)
desc.proficiency_overall.una <- stat.desc(pp.unaware$proficiency_overall, basic=TRUE, norm=TRUE)
# proficiency_oral
desc.proficiency_oral.exp <- stat.desc(pp.explicit$proficiency_oral, basic=TRUE, norm=TRUE)
desc.proficiency_oral.inc <- stat.desc(pp.incidental$proficiency_oral, basic=TRUE, norm=TRUE)
desc.proficiency_oral.una <- stat.desc(pp.unaware$proficiency_oral, basic=TRUE, norm=TRUE)
# proficiency_written
desc.proficiency_written.exp <- stat.desc(pp.explicit$proficiency_written, basic=TRUE, norm=TRUE)
desc.proficiency_written.inc <- stat.desc(pp.incidental$proficiency_written, basic=TRUE, norm=TRUE)
desc.proficiency_written.una <- stat.desc(pp.unaware$proficiency_written, basic=TRUE, norm=TRUE)
# proficiency_average
desc.proficiency_average.exp <- stat.desc(pp.explicit$proficiency_average, basic=TRUE, norm=TRUE)
desc.proficiency_average.inc <- stat.desc(pp.incidental$proficiency_average, basic=TRUE, norm=TRUE)
desc.proficiency_average.una <- stat.desc(pp.unaware$proficiency_average, basic=TRUE, norm=TRUE)
# comprehension_oral
desc.comprehension_oral.exp <- stat.desc(pp.explicit$comprehension_oral, basic=TRUE, norm=TRUE)
desc.comprehension_oral.inc <- stat.desc(pp.incidental$comprehension_oral, basic=TRUE, norm=TRUE)
desc.comprehension_oral.una <- stat.desc(pp.unaware$comprehension_oral, basic=TRUE, norm=TRUE)
# comprehension_written
desc.comprehension_written.exp <- stat.desc(pp.explicit$comprehension_written, basic=TRUE, norm=TRUE)
desc.comprehension_written.inc <- stat.desc(pp.incidental$comprehension_written, basic=TRUE, norm=TRUE)
desc.comprehension_written.una <- stat.desc(pp.unaware$comprehension_written, basic=TRUE, norm=TRUE)
# PRE_CRIT
desc.PRE_CRIT.exp <- stat.desc(pp.explicit$PRE_CRIT, basic=TRUE, norm=TRUE)
desc.PRE_CRIT.inc <- stat.desc(pp.incidental$PRE_CRIT, basic=TRUE, norm=TRUE)
desc.PRE_CRIT.una <- stat.desc(pp.unaware$PRE_CRIT, basic=TRUE, norm=TRUE) # error (I'll exclude it from the list)
# PRE_CONTR
desc.PRE_CONTR.exp <- stat.desc(pp.explicit$PRE_CONTR, basic=TRUE, norm=TRUE)
desc.PRE_CONTR.inc <- stat.desc(pp.incidental$PRE_CONTR, basic=TRUE, norm=TRUE)
desc.PRE_CONTR.una <- stat.desc(pp.unaware$PRE_CONTR, basic=TRUE, norm=TRUE)
# usage
desc.usage.exp <- stat.desc(pp.explicit$usage, basic=TRUE, norm=TRUE)
desc.usage.inc <- stat.desc(pp.incidental$usage, basic=TRUE, norm=TRUE)
desc.usage.una <- stat.desc(pp.unaware$usage, basic=TRUE, norm=TRUE)
desc.usage.exp
desc.usage.inc
desc.usage.una
# bind results together
desc.results <- cbind(desc.lextale.exp,desc.lextale.inc,desc.lextale.una,
desc.proficiency_overall.exp,desc.proficiency_overall.inc,desc.proficiency_overall.una,
desc.proficiency_oral.exp,desc.proficiency_oral.inc,desc.proficiency_oral.una,
desc.proficiency_written.exp,desc.proficiency_written.inc,desc.proficiency_written.una,
desc.proficiency_average.exp,desc.proficiency_average.inc,desc.proficiency_average.una,
desc.comprehension_oral.exp,desc.comprehension_oral.inc,desc.comprehension_oral.una,
desc.comprehension_written.exp,desc.comprehension_written.inc,desc.comprehension_written.una,
desc.PRE_CRIT.exp,desc.PRE_CRIT.inc, desc.PRE_CONTR.exp,desc.PRE_CONTR.inc,desc.PRE_CONTR.una,
desc.usage.exp, desc.usage.inc, desc.usage.una)
write.csv(desc.results, file="../results/Skew_and_kurtosis.csv") # write csv output
library(ggplot2)
qqplot.lextale.exp <- qplot(sample=pp.explicit$lextale, stat="qq"); qqplot.lextale.exp
qqplot.lextale.inc <- qplot(sample=pp.incidental$lextale, stat="qq"); qqplot.lextale.inc
qqplot.lextale.una <- qplot(sample=pp.unaware$lextale, stat="qq"); qqplot.lextale.una
# proficiency_overall
qqplot.proficiency_overall.exp <- qplot(sample=pp.explicit$proficiency_overall, stat="qq"); qqplot.proficiency_overall.exp
qqplot.proficiency_overall.inc <- qplot(sample=pp.incidental$proficiency_overall, stat="qq"); qqplot.proficiency_overall.inc
qqplot.proficiency_overall.una <- qplot(sample=pp.unaware$proficiency_overall, stat="qq"); qqplot.proficiency_overall.una
# proficiency_oral
qqplot.proficiency_oral.exp <- qplot(sample=pp.explicit$proficiency_oral, stat="qq"); qqplot.proficiency_oral.exp
qqplot.proficiency_oral.inc <- qplot(sample=pp.incidental$proficiency_oral, stat="qq"); qqplot.proficiency_oral.inc
qqplot.proficiency_oral.una <- qplot(sample=pp.unaware$proficiency_oral, stat="qq"); qqplot.proficiency_oral.una
# proficiency_written
qqplot.proficiency_written.exp <- qplot(sample=pp.explicit$proficiency_written, stat="qq"); qqplot.proficiency_written.exp
qqplot.proficiency_written.inc <- qplot(sample=pp.incidental$proficiency_written, stat="qq"); qqplot.proficiency_written.inc
qqplot.proficiency_written.una <- qplot(sample=pp.unaware$proficiency_written, stat="qq"); qqplot.proficiency_written.una
# proficiency_average
qqplot.proficiency_average.exp <- qplot(sample=pp.explicit$proficiency_average, stat="qq"); qqplot.proficiency_average.exp
qqplot.proficiency_average.inc <- qplot(sample=pp.incidental$proficiency_average, stat="qq"); qqplot.proficiency_average.inc
qqplot.proficiency_average.una <- qplot(sample=pp.unaware$proficiency_average, stat="qq"); qqplot.proficiency_average.una
# comprehension_oral
qqplot.comprehension_oral.exp <- qplot(sample=pp.explicit$comprehension_oral, stat="qq"); qqplot.comprehension_oral.exp
qqplot.comprehension_oral.inc <- qplot(sample=pp.incidental$comprehension_oral, stat="qq"); qqplot.comprehension_oral.inc
qqplot.comprehension_oral.una <- qplot(sample=pp.unaware$comprehension_oral, stat="qq"); qqplot.comprehension_oral.una
# comprehension_written
qqplot.comprehension_written.exp <- qplot(sample=pp.explicit$comprehension_written, stat="qq"); qqplot.comprehension_written.exp
qqplot.comprehension_written.inc <- qplot(sample=pp.incidental$comprehension_written, stat="qq"); qqplot.comprehension_written.inc
qqplot.comprehension_written.una <- qplot(sample=pp.unaware$comprehension_written, stat="qq"); qqplot.comprehension_written.una
# PRE_CRIT
qqplot.PRE_CRIT.exp <- qplot(sample=pp.explicit$PRE_CRIT, stat="qq"); qqplot.PRE_CRIT.exp
qqplot.PRE_CRIT.inc <- qplot(sample=pp.incidental$PRE_CRIT, stat="qq"); qqplot.PRE_CRIT.inc
qqplot.PRE_CRIT.una <- qplot(sample=pp.unaware$PRE_CRIT, stat="qq"); qqplot.PRE_CRIT.una
# PRE_CONTR
qqplot.PRE_CONTR.exp <- qplot(sample=pp.explicit$PRE_CONTR, stat="qq"); qqplot.PRE_CONTR.exp
qqplot.PRE_CONTR.inc <- qplot(sample=pp.incidental$PRE_CONTR, stat="qq"); qqplot.PRE_CONTR.inc
qqplot.PRE_CONTR.una <- qplot(sample=pp.unaware$PRE_CONTR, stat="qq"); qqplot.PRE_CONTR.una
# usage
qqplot.usage.exp <- qplot(sample=pp.explicit$usage, stat="qq"); qqplot.usage.exp
qqplot.usage.inc <- qplot(sample=pp.incidental$usage, stat="qq"); qqplot.usage.inc
qqplot.usage.una <- qplot(sample=pp.unaware$usage, stat="qq"); qqplot.usage.una
# SAVING PLOT AS PNG:
qqplot.lextale.exp
plotwidth = 8
plotheight = 6.5
qq-lextale-exp <-recordPlot() # Save plot information into record
# Create png with width, height and resolution
png("qq-lextale-exp.png", width=plotwidth, height=plotheight,units="in",res=300)
replayPlot(qq-lextale-exp)
dev.off()
png("../results/qq-lextale-exp.png", width=plotwidth, height=plotheight,units="in",res=300)
rm(list=ls()) # clear workspace
data <- read.csv("../data/180529_Moedertabel_complete_long_format")
data <- read.csv("../data/180529_Moedertabel_complete_long_format.csv")
data <- read.csv("../data/180529_Moedertabel_complete_long_format.csv")
data <- read.csv("../data/Long_data.csv")
View(data)
data$X <- NULL
View(data)
library(lmer)
library(lme4)
str(data)
data <- data[data$learningtype!="unaware",]
View(data)
rm(list=ls())
data <- read.csv("../data/Long_data.csv")
data$X <- NULL
str(data)
data$X <- NULL
data <- data[data$learningtype!="unaware",]
fixed_effects <- glmer(bin_score ~ learningtype + verbtype + input + testmoment, data = data)
fixed_effects <- glmer(bin_score ~ learningtype + verbtype + input + testmoment + (1|participant), data = data)
fixed_effects <- glmer(bin_score ~ learningtype + verbtype + input + testmoment + (1|participant), family = 'binomial', data = data)
start <- glmer(bin_score ~ learningtype + verbtype + input + testmoment + (1|participant), family = 'binomial', data = data)
summary(start)
str(data)
start <- glmer(bin_score ~ learningtype + verbtype + input + testmoment + input:testmoment + (1|participant), family = 'binomial', data = data)
summary(start)
install.packages("lme4")
install.packages("lme4")
install.packages("lme4")
install.packages("lme4")
